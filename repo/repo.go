package repo

import (
	"encoding/json"
	"fmt"
	"path"
	"time"

	bolt "go.etcd.io/bbolt"

	"github.com/jakenvac/DotHerd/config"
)

const current_map_version = "1"

const (
	name_link_bucket = "name_link"
	link_name_bucket = "link_name"
	meta_bucket      = "meta"
)

func initRepo() (*bolt.DB, error) {
	dbPath := path.Join(config.DEFAULT_DOT_DIR, "dotstore.db")
	db, err := bolt.Open(dbPath, 0600, nil)
	if err != nil {
		return nil, err
	}

	db.Update(func(tx *bolt.Tx) error {
		_, nlErr := tx.CreateBucketIfNotExists([]byte(name_link_bucket))
		if nlErr != nil {
			return nlErr
		}
		_, lnErr := tx.CreateBucketIfNotExists([]byte(link_name_bucket))
		if lnErr != nil {
			return lnErr
		}
		m, metaErr := tx.CreateBucketIfNotExists([]byte(meta_bucket))
		if metaErr != nil {
			return metaErr
		}

		version := m.Get([]byte("version"))
		if version == nil {
			m.Put([]byte("version"), []byte(current_map_version))
		}

		updated := m.Get([]byte("updated"))
		if updated == nil {
			now := time.Now().Format(time.RFC3339)
			m.Put([]byte("updated"), []byte(fmt.Sprintf("%s", now)))
		}

		return nil
	})

	return db, nil
}

type DotMap struct {
	LastUpdated string            `json:"last_updated"`
	Version string 							`json:"version"`
	Pen         map[string]string `json:"pen"`
}

type DotRepo struct {
	db *bolt.DB
}

func (dr *DotRepo) Json() (string, error) {
	dm := struct {
		Warning string `json:"__warning__"` 
		DotMap
	}{}

	dm.Warning = "Do not edit this file manually. It is managed by DotHerd."
	dm.Version = current_map_version

	dm.Pen = make(map[string]string)
	dr.db.View(func(tx *bolt.Tx) error {
		metaBucket := tx.Bucket([]byte(meta_bucket))
		dm.LastUpdated = string(metaBucket.Get([]byte("updated")))

		nameLinkBucket := tx.Bucket([]byte(name_link_bucket))
		cursor := nameLinkBucket.Cursor()
		for k, v := cursor.First(); k != nil; k, v = cursor.Next() {
			dm.Pen[string(k)] = string(v)
		}
		return nil
	})

	if json, err := json.MarshalIndent(dm, "", "  "); err == nil {
		return string(json), nil
	} else {
		return "", fmt.Errorf("Error marshalling dotstore: %s", err)
	}
}

func (dr *DotRepo) String() string {
	if json, err := dr.Json(); err == nil {
		return json
	} else {
		return fmt.Sprintf("Error marshalling dotstore: %s", err)
	}
}

func (dr *DotRepo) Close() error {
	return dr.db.Close()
}

func (dr *DotRepo) Herd(dot, aliasInPen string) error {
	return dr.db.Update(func(tx *bolt.Tx) error {
		nameLinkBucket := tx.Bucket([]byte(name_link_bucket))
		linkNameBucket := tx.Bucket([]byte(link_name_bucket))
		metaBucket := tx.Bucket([]byte(meta_bucket))

		if err := nameLinkBucket.Put([]byte(aliasInPen), []byte(dot)); err != nil {
			return err
		}

		if err := linkNameBucket.Put([]byte(dot), []byte(aliasInPen)); err != nil {
			nameLinkBucket.Delete([]byte(aliasInPen))
			return err
		}

		now := time.Now().Format(time.RFC3339)
		if err := metaBucket.Put([]byte("updated"), []byte(fmt.Sprintf("%s", now))); //
		err != nil {
			nameLinkBucket.Delete([]byte(aliasInPen))
			linkNameBucket.Delete([]byte(dot))
		}

		return nil
	})
}

func (dr *DotRepo) NameFromLink(link string) (string, error) {
	var name string
	err := dr.db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte(link_name_bucket))
		name = string(b.Get([]byte(link)))
		return nil
	})
	if err != nil {
		return "", err
	}

	return name, nil
}

func (ds *DotRepo) LinkFromName(name string) (string, error) {
	var link string
	err := ds.db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte(name_link_bucket))
		link = string(b.Get([]byte(name)))
		return nil
	})
	if err != nil {
		return "", err
	}

	return link, nil
}

func (ds *DotRepo) Unherd(dot string) error {
	return ds.db.Update(func(tx *bolt.Tx) error {
		nameLinkBucket := tx.Bucket([]byte(name_link_bucket))
		linkNameBucket := tx.Bucket([]byte(link_name_bucket))
		metaBucket := tx.Bucket([]byte(meta_bucket))

		alias := string(linkNameBucket.Get([]byte(dot)))
		if err := nameLinkBucket.Delete([]byte(alias)); err != nil {
			return err
		}

		if err := linkNameBucket.Delete([]byte(dot)); err != nil {
			nameLinkBucket.Put([]byte(alias), []byte(dot))
			return err
		}

		now := time.Now().Format(time.RFC3339)
		if err := metaBucket.Put([]byte("updated"), []byte(fmt.Sprintf("%s", now))); //
		err != nil {
			nameLinkBucket.Put([]byte(alias), []byte(dot))
			linkNameBucket.Put([]byte(dot), []byte(alias))
		}

		return nil
	})
}

func New() (*DotRepo, error) {
	db, err := initRepo()
	if err != nil {
		return nil, err
	}

	return &DotRepo{db: db}, nil
}
